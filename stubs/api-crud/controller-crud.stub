<?php

namespace $CLASS_NAMESPACE$;

use Exception;
use $MODULE$\$MODEL$;
use Laraflow\ApiCrud\Exceptions\StoreOperationException;
use Laraflow\ApiCrud\Exceptions\UpdateOperationException;
use Laraflow\ApiCrud\Exceptions\DeleteOperationException;
$RESOURCE_NAMESPACES$
$REQUEST_NAMESPACES$
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Http\JsonResponse;
use Illuminate\Routing\Controller;
use Inertia\Response;

/**
 * Class $CLASS$
 * @package $CLASS_NAMESPACE$
 *
 * @lrd:start
 * This class handle create, preview, update, delete & restore
 * operation related to $RESOURCE$
 * @lrd:end
 *
 */
class $CLASS$ extends Controller
{
    /**
     * Return a list view of the *$RESOURCE$* resource.
     *
     * @param $INDEX_REQUEST$ $request
     * @return Response
     */
    public function index($INDEX_REQUEST$ $request): Response
    {
        $inputs = $request->validated();

        return render('$RESOURCE$/Index', compact('inputs'));
    }

    /**
     * Return a *$RESOURCE$* resource as collection or paginate.
     * ```paginate=false``` returns all resource as collection
     *
     * @param $INDEX_REQUEST$ $request
     * @return $RESOURCE$Collection|JsonResponse
     */
    public function search($INDEX_REQUEST$ $request): $RESOURCE$Collection|JsonResponse
    {
        try {
            $inputs = $request->validated();

            $$RESOURCE_VARIABLE$s = $RESOURCE$::filter($inputs)
            ->orderBy($request->input('sort', 'id'), $request->input('dir', 'asc'));

           if($request->input('paginate', true)) {
                $$RESOURCE_VARIABLE$s = $$RESOURCE_VARIABLE$s->paginate($request->input('per_page'));
           } else {
                $$RESOURCE_VARIABLE$s = $$RESOURCE_VARIABLE$s->get();
           }

            return new $RESOURCE$Collection($$RESOURCE_VARIABLE$s);

        } catch (Exception $exception) {

            return response()->failed($exception->getMessage());
        }
    }

    /**
     * Return a create view of *$RESOURCE$* resource.
     *
     * @return Response
     */
    public function create(): Response
    {
        return render('$RESOURCE$/Create');
    }

    /**
     * Create a new *$RESOURCE$* resource in storage.
     *
     * @param $STORE_REQUEST$ $request
     * @return JsonResponse
     * @throws StoreOperationException
     */
    public function store($STORE_REQUEST$ $request): JsonResponse
    {
        try {
            $inputs = $request->validated();

            $$RESOURCE_VARIABLE$ = $RESOURCE$::create($inputs);

            if (!$$RESOURCE_VARIABLE$) {
                throw (new StoreOperationException)->setModel($RESOURCE$::class);
            }

            return response()->created([
                'message' => __('api-crud::messages.resource.created', ['model' => '$MESSAGE_VARIABLE$']),
                'id' => $$RESOURCE_VARIABLE$->getKey()
             ]);

        } catch (Exception $exception) {

            return response()->failed($exception->getMessage());
        }
    }

    /**
     * Return a show view of *$RESOURCE$* resource found by id.
     *
     * @param $RESOURCE$ $$RESOURCE_VARIABLE$
     * @return Response
     */
    public function show($RESOURCE$ $$RESOURCE_VARIABLE$): Response
    {
        $$RESOURCE_VARIABLE$ = new $RESOURCE$Resource($$RESOURCE_VARIABLE$);

        return render('$RESOURCE$/Show', compact('$RESOURCE_VARIABLE$'));
    }

    /**
     * Return a edit page *$RESOURCE$* resource found by id.
     *
     * @param $RESOURCE$ $$RESOURCE_VARIABLE$
     * @return Response
     */
    public function edit($RESOURCE$ $$RESOURCE_VARIABLE$): Response
    {
        $$RESOURCE_VARIABLE$ = new $RESOURCE$Resource($$RESOURCE_VARIABLE$);

        return render('$RESOURCE$/Edit', compact('$RESOURCE_VARIABLE$'));
    }

    /**
     * Update a specified *$RESOURCE$* resource using id.
     *
     * @param $UPDATE_REQUEST$ $request
     * @param $RESOURCE$ $$RESOURCE_VARIABLE$
     * @return JsonResponse
     * @throws UpdateOperationException
     */
    public function update($UPDATE_REQUEST$ $request, $RESOURCE$ $$RESOURCE_VARIABLE$): JsonResponse
    {
        try {

            $inputs = $request->validated();

            if (!$$RESOURCE_VARIABLE$->update($inputs)) {

                throw (new UpdateOperationException)->setModel($RESOURCE$::class, $$RESOURCE_VARIABLE$->getKey());
            }

            return response()->updated(__('api-crud::messages.resource.updated', ['model' => '$MESSAGE_VARIABLE$']));

        } catch (Exception $exception) {

            return response()->failed($exception->getMessage());
        }
    }

    /**
     * Soft delete a specified *$RESOURCE$* resource using id.
     *
     * @param $RESOURCE$ $$RESOURCE_VARIABLE$
     * @return JsonResponse
     * @throws DeleteOperationException
     */
    public function destroy($RESOURCE$ $$RESOURCE_VARIABLE$): JsonResponse
    {
        try {

            if (!$$RESOURCE_VARIABLE$->delete()) {

                throw (new DeleteOperationException())->setModel($RESOURCE$::class, $$RESOURCE_VARIABLE$->getKey());
            }

            return response()->deleted(__('api-crud::messages.resource.deleted', ['model' => '$MESSAGE_VARIABLE$']));

        } catch (Exception $exception) {

            return response()->failed($exception->getMessage());
        }
    }
}
